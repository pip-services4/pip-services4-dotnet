// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/dummies.proto
// </auto-generated>
// Original file comments:
// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace PipServices4.Grpc.Protos {
  /// <summary>
  /// The dummies service definition.
  /// </summary>
  public static partial class Dummies
  {
    static readonly string __ServiceName = "dummies.Dummies";

    static readonly grpc::Marshaller<global::PipServices4.Grpc.Protos.DummiesPageRequest> __Marshaller_dummies_DummiesPageRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::PipServices4.Grpc.Protos.DummiesPageRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::PipServices4.Grpc.Protos.DummiesPage> __Marshaller_dummies_DummiesPage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::PipServices4.Grpc.Protos.DummiesPage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::PipServices4.Grpc.Protos.DummyIdRequest> __Marshaller_dummies_DummyIdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::PipServices4.Grpc.Protos.DummyIdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::PipServices4.Grpc.Protos.Dummy> __Marshaller_dummies_Dummy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::PipServices4.Grpc.Protos.Dummy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::PipServices4.Grpc.Protos.DummyObjectRequest> __Marshaller_dummies_DummyObjectRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::PipServices4.Grpc.Protos.DummyObjectRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::PipServices4.Grpc.Protos.DummiesPageRequest, global::PipServices4.Grpc.Protos.DummiesPage> __Method_get_dummies = new grpc::Method<global::PipServices4.Grpc.Protos.DummiesPageRequest, global::PipServices4.Grpc.Protos.DummiesPage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "get_dummies",
        __Marshaller_dummies_DummiesPageRequest,
        __Marshaller_dummies_DummiesPage);

    static readonly grpc::Method<global::PipServices4.Grpc.Protos.DummyIdRequest, global::PipServices4.Grpc.Protos.Dummy> __Method_get_dummy_by_id = new grpc::Method<global::PipServices4.Grpc.Protos.DummyIdRequest, global::PipServices4.Grpc.Protos.Dummy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "get_dummy_by_id",
        __Marshaller_dummies_DummyIdRequest,
        __Marshaller_dummies_Dummy);

    static readonly grpc::Method<global::PipServices4.Grpc.Protos.DummyObjectRequest, global::PipServices4.Grpc.Protos.Dummy> __Method_create_dummy = new grpc::Method<global::PipServices4.Grpc.Protos.DummyObjectRequest, global::PipServices4.Grpc.Protos.Dummy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "create_dummy",
        __Marshaller_dummies_DummyObjectRequest,
        __Marshaller_dummies_Dummy);

    static readonly grpc::Method<global::PipServices4.Grpc.Protos.DummyObjectRequest, global::PipServices4.Grpc.Protos.Dummy> __Method_update_dummy = new grpc::Method<global::PipServices4.Grpc.Protos.DummyObjectRequest, global::PipServices4.Grpc.Protos.Dummy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "update_dummy",
        __Marshaller_dummies_DummyObjectRequest,
        __Marshaller_dummies_Dummy);

    static readonly grpc::Method<global::PipServices4.Grpc.Protos.DummyIdRequest, global::PipServices4.Grpc.Protos.Dummy> __Method_delete_dummy_by_id = new grpc::Method<global::PipServices4.Grpc.Protos.DummyIdRequest, global::PipServices4.Grpc.Protos.Dummy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "delete_dummy_by_id",
        __Marshaller_dummies_DummyIdRequest,
        __Marshaller_dummies_Dummy);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::PipServices4.Grpc.Protos.DummiesReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Dummies</summary>
    [grpc::BindServiceMethod(typeof(Dummies), "BindService")]
    public abstract partial class DummiesBase
    {
      public virtual global::System.Threading.Tasks.Task<global::PipServices4.Grpc.Protos.DummiesPage> get_dummies(global::PipServices4.Grpc.Protos.DummiesPageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::PipServices4.Grpc.Protos.Dummy> get_dummy_by_id(global::PipServices4.Grpc.Protos.DummyIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::PipServices4.Grpc.Protos.Dummy> create_dummy(global::PipServices4.Grpc.Protos.DummyObjectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::PipServices4.Grpc.Protos.Dummy> update_dummy(global::PipServices4.Grpc.Protos.DummyObjectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::PipServices4.Grpc.Protos.Dummy> delete_dummy_by_id(global::PipServices4.Grpc.Protos.DummyIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Dummies</summary>
    public partial class DummiesClient : grpc::ClientBase<DummiesClient>
    {
      /// <summary>Creates a new client for Dummies</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public DummiesClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Dummies that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public DummiesClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected DummiesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected DummiesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::PipServices4.Grpc.Protos.DummiesPage get_dummies(global::PipServices4.Grpc.Protos.DummiesPageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return get_dummies(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PipServices4.Grpc.Protos.DummiesPage get_dummies(global::PipServices4.Grpc.Protos.DummiesPageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_get_dummies, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PipServices4.Grpc.Protos.DummiesPage> get_dummiesAsync(global::PipServices4.Grpc.Protos.DummiesPageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return get_dummiesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PipServices4.Grpc.Protos.DummiesPage> get_dummiesAsync(global::PipServices4.Grpc.Protos.DummiesPageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_get_dummies, null, options, request);
      }
      public virtual global::PipServices4.Grpc.Protos.Dummy get_dummy_by_id(global::PipServices4.Grpc.Protos.DummyIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return get_dummy_by_id(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PipServices4.Grpc.Protos.Dummy get_dummy_by_id(global::PipServices4.Grpc.Protos.DummyIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_get_dummy_by_id, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PipServices4.Grpc.Protos.Dummy> get_dummy_by_idAsync(global::PipServices4.Grpc.Protos.DummyIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return get_dummy_by_idAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PipServices4.Grpc.Protos.Dummy> get_dummy_by_idAsync(global::PipServices4.Grpc.Protos.DummyIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_get_dummy_by_id, null, options, request);
      }
      public virtual global::PipServices4.Grpc.Protos.Dummy create_dummy(global::PipServices4.Grpc.Protos.DummyObjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return create_dummy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PipServices4.Grpc.Protos.Dummy create_dummy(global::PipServices4.Grpc.Protos.DummyObjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_create_dummy, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PipServices4.Grpc.Protos.Dummy> create_dummyAsync(global::PipServices4.Grpc.Protos.DummyObjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return create_dummyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PipServices4.Grpc.Protos.Dummy> create_dummyAsync(global::PipServices4.Grpc.Protos.DummyObjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_create_dummy, null, options, request);
      }
      public virtual global::PipServices4.Grpc.Protos.Dummy update_dummy(global::PipServices4.Grpc.Protos.DummyObjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return update_dummy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PipServices4.Grpc.Protos.Dummy update_dummy(global::PipServices4.Grpc.Protos.DummyObjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_update_dummy, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PipServices4.Grpc.Protos.Dummy> update_dummyAsync(global::PipServices4.Grpc.Protos.DummyObjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return update_dummyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PipServices4.Grpc.Protos.Dummy> update_dummyAsync(global::PipServices4.Grpc.Protos.DummyObjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_update_dummy, null, options, request);
      }
      public virtual global::PipServices4.Grpc.Protos.Dummy delete_dummy_by_id(global::PipServices4.Grpc.Protos.DummyIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return delete_dummy_by_id(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PipServices4.Grpc.Protos.Dummy delete_dummy_by_id(global::PipServices4.Grpc.Protos.DummyIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_delete_dummy_by_id, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PipServices4.Grpc.Protos.Dummy> delete_dummy_by_idAsync(global::PipServices4.Grpc.Protos.DummyIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return delete_dummy_by_idAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PipServices4.Grpc.Protos.Dummy> delete_dummy_by_idAsync(global::PipServices4.Grpc.Protos.DummyIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_delete_dummy_by_id, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override DummiesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DummiesClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(DummiesBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_get_dummies, serviceImpl.get_dummies)
          .AddMethod(__Method_get_dummy_by_id, serviceImpl.get_dummy_by_id)
          .AddMethod(__Method_create_dummy, serviceImpl.create_dummy)
          .AddMethod(__Method_update_dummy, serviceImpl.update_dummy)
          .AddMethod(__Method_delete_dummy_by_id, serviceImpl.delete_dummy_by_id).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, DummiesBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_get_dummies, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::PipServices4.Grpc.Protos.DummiesPageRequest, global::PipServices4.Grpc.Protos.DummiesPage>(serviceImpl.get_dummies));
      serviceBinder.AddMethod(__Method_get_dummy_by_id, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::PipServices4.Grpc.Protos.DummyIdRequest, global::PipServices4.Grpc.Protos.Dummy>(serviceImpl.get_dummy_by_id));
      serviceBinder.AddMethod(__Method_create_dummy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::PipServices4.Grpc.Protos.DummyObjectRequest, global::PipServices4.Grpc.Protos.Dummy>(serviceImpl.create_dummy));
      serviceBinder.AddMethod(__Method_update_dummy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::PipServices4.Grpc.Protos.DummyObjectRequest, global::PipServices4.Grpc.Protos.Dummy>(serviceImpl.update_dummy));
      serviceBinder.AddMethod(__Method_delete_dummy_by_id, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::PipServices4.Grpc.Protos.DummyIdRequest, global::PipServices4.Grpc.Protos.Dummy>(serviceImpl.delete_dummy_by_id));
    }

  }
}
#endregion
